2009-10-06  Philip Allison <sane@not.co.uk>

	* ChangeLog, NEWS: Update ChangeLog and NEWS for 0.4 Reflow ChangeLog
	to 78 characters using vim

2009-10-06  Philip Allison <sane@not.co.uk>

	* src/game.cxx: Fix end-game logic bug reported by Jan Engelhardt When
	the game ends, the winning player should automatically capture any
	empty squares, as this advances the board to the state it would be in
	if the game was played until the board was full.  Without this, it is
	possible for one player to block off all their opponent's moves and
	lose the game, even though the number of empty squares remaining would
	make their piece count highest if captured.

2009-10-06  Philip Allison <sane@not.co.uk>

	* src/game.cxx, src/game.hxx, src/gamewindow.hxx, src/infector.cxx:
	Make start & end pop-ups trigger on main loop idle Prevent sending the
	last move of a game over the network from being delayed until the win
	dialogue is closed by the winning player, by connecting a function for
	displaying the dialogue to Glib::SignalIdle.  Use the same technique
	for the "You are playing as..." dialogues on clients at the start of a
	network game.

2009-09-21  Philip Allison <sane@not.co.uk>

	* po/POTFILES.in, po/cs.po: Update i18n support and Czech translation
	Reference new GtkBuilder/UIManager files in POTFILES.in instead of the
	old Glade file.  Update the Czech translation for use with the new set
	of messages.

2009-09-21  Philip Allison <sane@not.co.uk>

	* configure.ac: Remove libglademm dependency; bump version to 0.4
	Don't look for libglademm on the host system any more; instead, look
	for a more recent gtkmm.  Change package version number to 0.4.

2009-09-21  Philip Allison <sane@not.co.uk>

	* src/clientstatusdialog.cxx, src/clientstatusdialog.hxx,
	src/game.cxx, src/gameboard.cxx, src/gameboard.hxx,
	src/gamewindow.hxx, src/infector.cxx, src/newgamedialog.cxx,
	src/newgamedialog.hxx, src/serverstatusdialog.cxx,
	src/serverstatusdialog.hxx: Convert UI code to use GtkBuilder
	Instantiate main UI using GtkBuilder instead of libglade, including
	removing inclusion of libglademm, and using UIManager to instantiate
	menus and toolbars.

2009-09-21  Philip Allison <sane@not.co.uk>

	* data/Makefile.am, data/infector.glade, data/infector.ui,
	data/menu.ui: Replace old Glade UI description with GtkBuilder Remove
	the old infector.glade file, and replace it with a newly-converted
	GtkBuilder UI description.  Also translate old menus, menu items and
	toolbar items into a UIManager description file.

2009-04-13  Philip Allison <sane@not.co.uk>

	* ChangeLog: Updating ChangeLog for 0.3

2009-04-13  Philip Allison <sane@not.co.uk>

	* po/cs.po: Update Czech translation for 0.3

2009-04-13  Philip Allison <sane@not.co.uk>

	* ChangeLog, NEWS: Update ChangeLog and NEWS for 0.3 release

2009-04-12  Philip Allison <sane@not.co.uk>

	* configure.ac: Version bump to 0.3 following recent changes

2009-04-12  Philip Allison <sane@not.co.uk>

	* src/infector.cxx: Make it easier to know when it's your turn Add a
	popup following successful connection to a network server, which tells
	the user which colour they are playing as.  Use hacks to enable Pango
	markup on the status bar, so that the text can be displayed in bold if
	a local human player needs to take action.

2009-04-12  Philip Allison <sane@not.co.uk>

	* src/game.cxx, src/game.hxx: Code updates and bug fixes Bring code
	into line with the fact that ServerStatusDialog and ClientStatusDialog
	now return pointers, not Glib::RefPtrs, to their socket objects.  Also
	store socket event handler connections, so we can explicitly
	disconnect event handlers in response to socket errors.  This fixes a
	bug whereby the server wouldn't shut down other client connections if
	an error occurred on one of the client sockets, and would subsequently
	hang if the user then tried to start a new game.  Additionally, add a
	getGameType method, so GameWindow can retrieve the current GameType
	without having to store a local copy/pointer.

2009-04-12  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx: Fix a missing include Fix missing include of
	<memory>, which causes compilation failures on newer, stricter
	versions of GCC.

2009-04-12  Philip Allison <sane@not.co.uk>

	* src/clientstatusdialog.cxx, src/clientstatusdialog.hxx: Use Socket
	pointers; put local client info in bold Make serversock a simple
	pointer to a Socket, not a Glib::RefPtr, to bring in line with the
	interface now provided by ServerStatusDialog.  Also, show information
	pertaining to the local client in bold in the game details display, so
	that players can distinguish which colour they are currently assigned
	to.

2009-04-12  Philip Allison <sane@not.co.uk>

	* src/serverstatusdialog.cxx, src/serverstatusdialog.hxx: Don't put
	Glib::RefPtrs in STL containers Change clientsockets to a container of
	simple ClientSocket pointers, because reference counting seems to go
	strange if a Glib::RefPtr is put inside an STL container, making life
	difficult when the Game class tries to clear up the client sockets
	later on.

2009-04-12  Philip Allison <sane@not.co.uk>

	* configure.ac, po/cs.po: Add Czech translation from Petr Pisar

2009-03-01  Philip Allison <sane@not.co.uk>

	* ChangeLog, NEWS: Update ChangeLog and NEWS for 0.2

2009-03-01  Philip Allison <sane@not.co.uk>

	* data/infector.glade: Add proper title to client status dialogue Oops
	- just noticed that the title of the client status dialogue was
	"infector".  It is now "Join Network Game".

2009-02-27  Philip Allison <sane@not.co.uk>

	* data/Makefile.am: Changes to data files to accomodate Windows On
	Windows, we want pre-rendered icon files and about dialogue images.
	Also, the "stock_people" image seems to be missing from the GTK+
	runtime package for Windows, so include it here.  Change the data
	makefile to not bother doing the bits which aren't necessary on
	Windows, such as rendering out various icon sizes and installing a
	.desktop file.

2009-02-27  Philip Allison <sane@not.co.uk>

	* data/infector.glade: Bump version number in About dialogue to 0.2

2009-02-27  Philip Allison <sane@not.co.uk>

	* configure.ac: MinGW tweaks; bump to 0.2 Make the application compile
	and link cleanly under MinGW.  This includes bumping the required
	versions of autoconf/automake, as we need (for example) a newer
	aclocal than was previously being asked for if we're going to
	successfully rebuild the build scripts.  Tentatively bump the version
	number to 0.2 to reflect recent work.

2009-02-27  Philip Allison <sane@not.co.uk>

	* src/Makefile.am, src/infector.cxx: More MinGW-specific changes Start
	up Winsock when the application is launched, and perform various
	icon-related operations so that the application "looks right" on
	Windows.  Also, use relative paths for finding data files, not
	absolute paths, since the install prefix after compilation is not
	fixed.

2009-02-27  Philip Allison <sane@not.co.uk>

	* src/clientstatusdialog.cxx, src/serverstatusdialog.cxx,
	src/socket.cxx: Make networking code compile under MinGW

2009-02-18  Philip Allison <sane@not.co.uk>

	* ChangeLog: Add changelog with help of git2cl

2009-02-18  Philip Allison <sane@not.co.uk>

	* NEWS: Add news about upcoming 0.1 tag

2009-02-18  Philip Allison <sane@not.co.uk>

	* data/Makefile.am: Update copyright dates on makefile

2009-02-18  Philip Allison <sane@not.co.uk>

	* src/Makefile.am, src/infector-i18n.hxx: Oops - forgot the i18n
	helper header

2009-02-18  Philip Allison <sane@not.co.uk>

	* Makefile.am, bootstrap.sh, configure.ac, data/Makefile.am,
	data/infector.desktop.in, data/infector.desktop.in.in, po/POTFILES.in,
	src/Makefile.am, src/clientstatusdialog.cxx, src/game.cxx,
	src/infector.cxx, src/serverstatusdialog.cxx: Code & build system
	changes for i18n The works: glib-gettextize and intltoolize in
	bootstrap.sh, checks for intltool and gettext in configure.ac, code
	changes including marking translatable strings, changes to the
	processing of the .desktop file to include merging of translations,
	and a list of files pertinent to the localisation process.

2009-02-18  Philip Allison <sane@not.co.uk>

	* data/infector.glade: Set window icons to application icon

2009-02-18  Philip Allison <sane@not.co.uk>

	* src/Makefile.am: Add header files to infector_SOURCES

2009-02-17  Philip Allison <sane@not.co.uk>

	* configure.ac, data/Makefile.am, data/infector.desktop.in: Distribute
	and install a .desktop file Use absolute path for Exec key so we can
	run the game from non-standard installation prefixes.  This means
	having a ".desktop.in" file, processed by make, but is generally a
	good thing.

2009-02-17  Philip Allison <sane@not.co.uk>

	* data/Makefile.am, data/infector.svg: Add application icon for
	desktop menus Create a first attempt at an SVG icon for the
	application.  Distribute pre-rendered PNGs of various sizes using
	RSVG, and install them using xdg-utils.  Still missing an actual menu
	entry - that comes next. :)

2009-02-17  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx: Fix board shape bug upon ending hexagonal games

2009-02-13  Philip Allison <philip.allison@smoothwall.net>

	* src/gameboard.cxx: Draw outlines around counters Signed-off-by:
	Philip Allison <philip.allison@smoothwall.net>

2009-02-12  Philip Allison <philip.allison@smoothwall.net>

	* src/gameboard.cxx: Make game board always sensitive to clicks To
	simplify various bits of code, the game board should *always* be
	sensitive to user input; the test for whether or not to act on it is
	in onClick itself.  This fixes the inability to make moves when the
	first player in a game isn't a local human (i.e. they're a network
	client or AI player).  Signed-off-by: Philip Allison
	<philip.allison@smoothwall.net>

2009-02-12  Philip Allison <philip.allison@smoothwall.net>

	* src/infector.cxx: Don't set default status bar state twice in a row
	Signed-off-by: Philip Allison <philip.allison@smoothwall.net>

2009-02-11  Philip Allison <philip.allison@smoothwall.net>

	* src/game.cxx, src/game.hxx: Act as a network client Parse moves sent
	from the server, and act on them; send moves to the server.  Currently
	seems to have a bug in that the local board doesn't become sensitive
	when it's the client's turn.  Signed-off-by: Philip Allison
	<philip.allison@smoothwall.net>

2009-02-11  Philip Allison <philip.allison@smoothwall.net>

	* src/infector.cxx: Don't let ClientStatusDialog keep socket refs Once
	the dialogue has responded, it doesn't need its own RefPtr to the
	server socket any more; it's supposed to be under Game's control now.
	Signed-off-by: Philip Allison <philip.allison@smoothwall.net>

2009-02-11  Philip Allison <philip.allison@smoothwall.net>

	* src/serverstatusdialog.cxx: Send game start signal when OK button is
	pressed Signed-off-by: Philip Allison <philip.allison@smoothwall.net>

2009-02-10  Philip Allison <sane@not.co.uk>

	* data/infector.glade: Improve label alignment on dialogues

2009-02-10  Philip Allison <sane@not.co.uk>

	* src/clientstatusdialog.cxx, src/clientstatusdialog.hxx: Finish
	(pending bugs) client status dialogue Parse board width & height in
	game description headers; validate header data; display a full set of
	game details on the UI

2009-02-10  Philip Allison <sane@not.co.uk>

	* src/serverstatusdialog.cxx: Fix shortcomings & bugs in sending of
	game details Board width & height were not included in the header;
	player type numbers for local humans and local AI were the wrong way
	round; number of players was sent incorrectly for games on hexagonal
	boards

2009-02-10  Philip Allison <sane@not.co.uk>

	* src/clientstatusdialog.cxx: Fix problems with receiving multiple
	status updates

2009-02-10  Philip Allison <sane@not.co.uk>

	* data/infector.glade: Make client status dialogue modal

2009-02-10  Philip Allison <philip.allison@smoothwall.net>

	* src/Makefile.am, src/clientstatusdialog.cxx,
	src/clientstatusdialog.hxx, src/game.hxx: WIP - Bugfixes & quick hacks
	to ClientStatusDialog Just enough changes to start to see the client
	status dialogue in action.  Remarkably, it seems to be mostly working.
	Signed-off-by: Philip Allison <philip.allison@smoothwall.net>

2009-02-10  Philip Allison <sane@not.co.uk>

	* data/infector.glade, src/Makefile.am, src/clientsocket.cxx,
	src/clientsocket.hxx, src/clientstatusdialog.cxx,
	src/clientstatusdialog.hxx, src/game.cxx, src/game.hxx,
	src/gamewindow.hxx, src/infector.cxx, src/serverstatusdialog.cxx,
	src/serverstatusdialog.hxx, src/socket.cxx, src/socket.hxx: WIP -
	Finishing off network code

2009-02-08  Philip Allison <sane@not.co.uk>

	* src/game.cxx, src/game.hxx, src/gameboard.cxx, src/gameboard.hxx,
	src/gamewindow.hxx, src/infector.cxx: Handle errors & disconnections
	on client sockets Admittedly it just ends the game, but at least it
	does so without crashing.  :)

2009-02-08  Philip Allison <sane@not.co.uk>

	* src/serverstatusdialog.cxx, src/serverstatusdialog.hxx: Handle write
	errors on client sockets Also tidy up arguments to sigc::mem_fun

2009-02-08  Philip Allison <sane@not.co.uk>

	* src/clientsocket.cxx, src/clientsocket.hxx: Add error signal for
	asynchronous write failures Add a write error signal, and emit it
	whenever a write fails.  Calling code cannot catch the exception
	directly itself, because this class does asynchronous writes.  Also,
	use "this" for sigc::mem_fun, not "*this".

2009-02-08  Philip Allison <sane@not.co.uk>

	* src/ai.cxx, src/newgamedialog.cxx: Tidy up sigc::mem_fun arguments
	Always use "this", not a mixture of "this" and "*this"

2009-02-07  Philip Allison <sane@not.co.uk>

	* src/game.cxx, src/game.hxx, src/gametype.hxx, src/infector.cxx: WIP
	in-game network server code Pass client socket references to Game from
	ServerStatusDialog when hosting of a network game is successfully set
	up, and implement code for receiving & validating moves sent by those
	clients, and for sending move details out to clients as necessary.
	Needs better error handling and more testing.

2009-02-07  Philip Allison <sane@not.co.uk>

	* src/serverstatusdialog.hxx: Add methods for retrieving client
	sockets Add methods which allow for calling code to retrieve the list
	of client sockets, such that it can create its own references to them,
	then wipe the references held by the server status dialogue so they
	won't stay open longer than expected.

2009-02-07  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx: Finally figured out immediate redraws There is no
	way to redraw the board "now" - at least, not that I can work out.
	However, we *can* queue a redraw then immediately pump the event loop.

2009-02-07  Philip Allison <sane@not.co.uk>

	* src/ai.cxx: Came across a typo in comments

2009-02-07  Philip Allison <sane@not.co.uk>

	* src/clientsocket.cxx: Make client sockets unbuffered Disable Glib's
	buffering on client sockets, which is stopping sockets from behaving
	as desired (transmit information immediately).

2009-01-29  Philip Allison <philip.allison@smoothwall.net>

	* src/serverstatusdialog.cxx: Don't call sendGameDetails twice for one
	event sendGameDetails is called from handleServerSocks when clients
	connect.  It is also called from setGUIFromClientState, to keep
	clients updated with other changes to the current state (disconnecting
	clients, changing colour assignments, etc.).  Don't call it from
	handleServerSocks, because handleServerSocks already calls
	setGUIFromClientState, as it should. :) Signed-off-by: Philip Allison
	<philip.allison@smoothwall.net>

2009-01-26  Philip Allison <sane@not.co.uk>

	* src/Makefile.am, src/clientinfo.hxx, src/clientsocket.cxx,
	src/clientsocket.hxx, src/infector.cxx, src/serverstatusdialog.cxx,
	src/serverstatusdialog.hxx: Send game details out to clients as they
	change Wrap client IOChannels inside a ClientSocket object, which
	handles non-blocking writes in the background on behalf of calling
	code, but which makes a const reference to the IOChannel accessible so
	that calling code can connect its own event handlers as well if it
	wishes.  Reimplement client handling in ServerStatusDialog to use
	ClientSockets, and create a method for serialising game details into a
	binary blob, sending it out to all connected clients whenever details
	change.

2009-01-18  Philip Allison <sane@not.co.uk>

	* data/infector.glade, src/clientinfo.hxx, src/infector.cxx,
	src/serverstatusdialog.cxx, src/serverstatusdialog.hxx: Flesh out
	ServerStatusDialog Finish most of the functionality in
	ServerStatusDialog, including: displaying client details as clients
	connect; assigning clients to player colours both automatically and
	manually; detecting when clients disconnect; manual kicking of
	clients; detecting when all player colours have been assigned to a
	player.  Still to do: send server status to clients when they connect
	& when player assignments changed; return remote client information to
	calling code.

2009-01-17  Philip Allison <sane@not.co.uk>

	* src/infector.cxx, src/newgamedialog.cxx: Remove some unnecessary
	includes following cleanup

2009-01-17  Philip Allison <sane@not.co.uk>

	* src/ai.cxx, src/ai.hxx, src/boardstate.cxx, src/boardstate.hxx,
	src/game.cxx, src/game.hxx, src/gameboard.cxx, src/gameboard.hxx,
	src/gametype.hxx, src/infector.cxx, src/newgamedialog.cxx,
	src/newgamedialog.hxx: Introduce GameType struct to clean up
	BoardState Remove methods which don't quite fit BoardState's remit,
	and reduce the number of arguments to certain other methods, by
	introducing a new GameType class for holding "constant" information
	(information which doesn't change throughout the life of a game) for a
	particular game.  Notably, clean up NewGameDialog by having it fill in
	a GameType instead of different methods for returning different
	properties, and remove all usage of bitsets for player type detection.

2009-01-15  Philip Allison <sane@not.co.uk>

	* data/infector.glade: Tweak UI setup to remove GTK deprecation
	warnings

2009-01-15  Philip Allison <sane@not.co.uk>

	* src/serverstatusdialog.cxx: Fix accept() call

2008-10-11  Philip Allison <sane@not.co.uk>

	* src/serverstatusdialog.cxx, src/serverstatusdialog.hxx: WIP
	implementation of server socket event handler Accept new connections
	when a client connects to a listening socket by binding its IOChannel
	to an event handler.  Disconnect from this event handler when the
	dialogue is closed.  Also put in TODOs documenting future work
	necessary to process client connections properly.

2008-10-11  Philip Allison <sane@not.co.uk>

	* configure.ac: Detect if compiling with MinGW If building on MinGW,
	set an Automake conditional to true, and define the MINGW preprocessor
	symbol in config.h.  This will be used to allow Windows-specific
	tweaks in the source (file paths, network code, etc.).

2008-10-11  Philip Allison <sane@not.co.uk>

	* src/Makefile.am, src/serverstatusdialog.cxx,
	src/serverstatusdialog.hxx: Beginnings of network play Add WIP code
	for the Host Game dialogue.  Currently this allows choosing a port
	number, and will open listening sockets on all available interfaces on
	that port.  Eventually this will accept connections from remote
	clients, allow the host to assign "Networked" players to those
	clients, then return the network status - including client sockets -
	back to the calling code when game setup is complete.

2008-10-11  Philip Allison <sane@not.co.uk>

	* src/newgamedialog.cxx, src/newgamedialog.hxx: Beginnings of network
	support Convert getAIPlayers into a generic getPlayersOfType function,
	and use it to implement both getAIPlayers and getRemotePlayers.

2008-10-11  Philip Allison <sane@not.co.uk>

	* src/gamewindow.hxx, src/infector.cxx: Beginnings of network support
	Add support for creating the server status dialogue to the main game
	creation code.  Will pop up the dialogue if any players of type
	"Networked" are chosen in the main new game dialogue.

2008-10-11  Philip Allison <sane@not.co.uk>

	* data/infector.glade: Beginnings of network support Add a player type
	of "Networked", and a dialogue which will allow server hosts to
	configure and start network games

2008-10-10  Philip Allison <sane@not.co.uk>

	* src/infector.cxx: Try gnome-open for emails in about dialogue
	Gnome-open can be used for opening default mail client, not just
	xdg-email.

2008-10-10  Philip Allison <sane@not.co.uk>

	* src/game.cxx, src/game.hxx, src/infector.cxx: Remove duplicate
	getScores method

2008-10-10  Philip Allison <sane@not.co.uk>

	* src/ai.hxx: Explain why BoardState is passed in to AI() It is not
	obvious why a BoardState reference is passed in to AI's constructor,
	seeing as the Game object passed in has a getBoardState function, but
	AIs are constructed during the constructor for Game.

2008-10-10  Philip Allison <sane@not.co.uk>

	* Makefile.am, README, bootstrap.sh, configure.ac,
	data/infector.glade, src/Makefile.am, src/ai.cxx, src/ai.hxx,
	src/boardstate.cxx, src/boardstate.hxx, src/game.cxx, src/game.hxx,
	src/gameboard.cxx, src/gameboard.hxx, src/gamewindow.hxx,
	src/infector.cxx, src/newgamedialog.cxx, src/newgamedialog.hxx:
	Capitalise I on project name

2008-07-10  Philip Allison <sane@not.co.uk>

	* configure.ac, src/gameboard.cxx: Allow building on MinGW32 Drop the
	version requirements of autoconf & automake to those in current stable
	MinGW development packages, and stop using a deprecated function of
	Gtk::Style.

2008-07-10  Philip Allison <sane@not.co.uk>

	* src/ai.cxx, src/ai.hxx, src/gameboard.cxx: Go back to the drawing
	board and implement a simpler, faster AI concept AI is no longer based
	on minimax, instead it works purely by looking at the current player's
	possible moves, concentrating on a detailed board state evaluation
	function instead of simulating opponent's moves.  The end result is a
	lot faster than minimax because of the dramatic reduction in number of
	moves evaluated, and seems to play the game on the square board
	reasonably well, but for some reason isn't too brilliant on the
	hexagonal game board.  Also fix a couple of bugs so that the game
	functions correctly when player 1 is an AI player, and tweak the move
	signalling code of AI players so that it's easier to see what moves
	are being made.

2008-07-01  Philip Allison <sane@not.co.uk>

	* src/ai.cxx: Add some useful debug output to the AI Can see what's
	going on now.  In the two-player game, the "suicidal" green player
	*is* actually doing the best it can in the end game (it may as well go
	out with 3 pieces captured than with 2 grown), so the questions that
	remain are: 1) Why so slow? 2) Why does it play such a crap opening
	game? Number 1 will hopefully be solved by more sensible code in
	BoardState and alpha-beta pruning.  Number 2 is most likely the
	ridiculously naive position evaluation function.

2008-06-27  Philip Allison <sane@not.co.uk>

	* src/ai.cxx, src/boardstate.cxx, src/boardstate.hxx, src/game.cxx,
	src/game.hxx, src/gameboard.cxx, src/infector.cxx: Move piece capture
	logic into BoardState and flesh out two-player AI Some game logic has
	been moved to BoardState so that AI can be implemented with less
	hassle.  Standard minimax AI has now been implemented, and works well
	for the two player game, but not so well for the four-player game.  It
	takes too long without some form of pruning, allowing us only to look
	one move ahead, and has a weak evaluation function - this means a
	player cannot be truly risk averse; they may capture a lot of pieces,
	but don't seem to spot the risk of any position they may be put in.
	Either that or it's just downright bug-ridden...

2008-06-26  Philip Allison <sane@not.co.uk>

	* src/ai.cxx, src/ai.hxx, src/gameboard.cxx: Back to the drawing board
	- standard minimax AI Caching future moves was too memory intensive
	and error prone, so scrap the whole scheme and go back to standard
	minimax.  Still seems to have a bug or two to iron out; for example,
	the computer won't make a move to eliminate another player if it can,
	and doesn't play particularly cleverly in a four-player game.  Its
	opening moves are also very predictable.

2008-06-25  Philip Allison <sane@not.co.uk>

	* src/ai.cxx, src/ai.hxx, src/boardstate.hxx: Trying to flesh out AI
	code, but currently broken. :( Attempting to build & maintain a tree
	of moves 4 levels deep, and follow link from root node to level 1 each
	time someone makes a move (discarding the now unneeded branches and
	generating new leaf nodes from what's left).  However there seems to
	be some memory corruption showing up during the deletion at present.

2008-06-25  Philip Allison <sane@not.co.uk>

	* src/ai.cxx, src/ai.hxx: Start work on proper minimax AI with
	heuristic move scoring

2008-06-25  Philip Allison <sane@not.co.uk>

	* src/game.cxx: Don't try to capture our own pieces

2008-06-24  Philip Allison <sane@not.co.uk>

	* src/Makefile.am, src/ai.cxx, src/ai.hxx, src/boardstate.cxx,
	src/boardstate.hxx, src/game.cxx, src/game.hxx, src/gameboard.cxx,
	src/infector.cxx, src/newgamedialog.cxx, src/newgamedialog.hxx: Dummy
	"AI" implementation It is now possible to play a game against the
	computer: the "new game" dialogue reports player types, which are
	acted upon by the rest of the code, but the "AI" routine itself
	currently consists of picking a move at random from the set of
	possible moves.

2008-06-23  Philip Allison <sane@not.co.uk>

	* src/ai.hxx, src/boardstate.cxx, src/boardstate.hxx, src/game.cxx,
	src/game.hxx: Incomplete start at AI player support

2008-06-21  Philip Allison <sane@not.co.uk>

	* data/infector.glade, src/game.cxx, src/game.hxx, src/gamewindow.hxx,
	src/infector.cxx: Keep track of scores, and show status notifications
	during & after game Game object keeps track of each player's score.
	GameWindow now listens for the move_made signal, and uses score
	information to display current game status in the status bar.  The
	status bar is now actually a row of several bars, as this is the
	simplest and visually cleanest way to have multiple messages
	side-by-side.

2008-06-21  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx: Oops - forgot to advance to next square when
	testing clicks against hexagons

2008-06-21  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx: Fix more warnings in point-in-hexagon test

2008-06-21  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx: Fix warnings & syntax errors in hexagon click
	test

2008-06-21  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx: Point-in-hexagon test to allow proper piece
	selection on hexagonal board

2008-06-21  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx: Fix move highlights on hexagonal board

2008-06-21  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx: Draw pieces & move highlights correctly on
	hexagonal board

2008-06-21  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx: More testing

2008-06-21  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx: Testing

2008-06-20  Philip Allison <sane@not.co.uk>

	* src/boardstate.cxx, src/boardstate.hxx, src/gameboard.cxx: Start
	work on hexagonal board rendering, plus general rendering improvements
	Render the backaground of hexagonal boards correctly (but not yet the
	pieces or valid move highlights).  Also, convert the square board
	rendering to draw one big square in one of the two colours, then
	overlay squares of the other, rather than draw many individual
	squares.  This now looks nicer with antialiasing enabled than the
	latter, so re-enable it. :)

2008-06-18  Philip Allison <sane@not.co.uk>

	* data/infector.glade, src/boardstate.cxx, src/boardstate.hxx,
	src/game.cxx, src/game.hxx, src/infector.cxx, src/newgamedialog.cxx,
	src/newgamedialog.hxx: Allow user to choose between 2 player hexagonal
	or 2/4 player square games Add a "board shape" drop-down to the new
	game dialogue, and a property accessor for it which is used to set the
	game type accordingly, instead of hard-coding to hexagonal.  Also,
	move setting the default state of the new game dialogue into the
	NewGameDialog class, for cleanliness.  Enforce valid game type
	constraints on the new game dialogue, so the user can't - for example
	- set up a four-player game on a hexagonal board.

2008-06-18  Philip Allison <sane@not.co.uk>

	* src/game.cxx, src/gameboard.cxx: Make Game and GameBoard use new
	abstraction features of BoardState Game and GameBoard now use
	getAdjacency when calculating valid moves and captured pieces, and no
	longer bother to perform their own range checking on grid squares.
	Board type is currently hard-coded to hexagonal for testing purposes.

2008-06-18  Philip Allison <sane@not.co.uk>

	* src/boardstate.cxx, src/boardstate.hxx: Finish implementing
	hexagonal board support in BoardState We now have proper
	initialisation for hexagonal boards, and a new value in the "piece"
	enumerated type for non-existent squares (holes). Added range checking
	and a function for calculating the adjacency of surrounding squares
	(for valid move checking & piece capturing) mean that Game and
	GameBoard needn't care about the shape of the board itself.

2008-06-17  Philip Allison <sane@not.co.uk>

	* src/boardstate.cxx, src/boardstate.hxx, src/game.cxx,
	src/gameboard.cxx: Beginnings of hexagonal board support Implement
	non-square boards by having different column heights, and a vertical
	offset per column, allowing us to implement a six-sided board.  We
	will eventually be able to play Hexxagon as well as Ataxx. :)

2008-06-12  Philip Allison <sane@not.co.uk>

	* src/game.cxx, src/game.hxx, src/gameboard.cxx, src/gameboard.hxx,
	src/gamewindow.hxx: Flesh out game logic to allow a full game to be
	played No AI yet, but piece capturing, turn skipping (if a player
	can't make any valid moves, their turn is skipped) and game over logic
	now exist.  A full game can be played by 2 or 4 local, human players.
	:)

2008-06-12  Philip Allison <sane@not.co.uk>

	* src/Makefile.am, src/infector.cxx, src/newgamedialog.cxx,
	src/newgamedialog.hxx: Flesh out new game dialogue to actually set
	game properties Turn the new game dialogue into a derived widget, and
	use that widget to allow setting of game properties in response to the
	user's interaction with the UI.  Note that the "type" of a player
	isn't yet taken into account, because no AI has yet been implemented.

2008-06-12  Philip Allison <sane@not.co.uk>

	* data/infector.glade: Minor UI tweaks Board not clickable on startup
	(will be set sensitive when a game is started).  New game widget not
	resizable.

2008-06-12  Philip Allison <sane@not.co.uk>

	* src/boardstate.cxx, src/boardstate.hxx, src/game.cxx, src/game.hxx,
	src/gameboard.cxx, src/gameboard.hxx: Beginnings of game logic: allow
	moves to be made Move info about current selected piece into the
	BoardState object, so that GameBoard and Game aren't maintaining said
	info separately from each other.  Add more methods for manipulating
	the board to the BoardState object (it is basically going to be a dumb
	container: the Game object will manipulate it, then fire off a signal
	for the corresponding event; things connected to the signal will then
	read the updated state from the container).  Implement logic to allow
	valid moves to be made, updating the board state accordingly.  Piece
	capturing & game end logic are not yet implemented, and we still need
	some form of player type abstraction to allow AI and network games.

2008-06-11  Philip Allison <sane@not.co.uk>

	* src/Makefile.am, src/boardstate.cxx, src/boardstate.hxx,
	src/game.cxx, src/game.hxx, src/gameboard.cxx, src/gameboard.hxx,
	src/infector.cxx: Start implementing shared board state for Game and
	GameBoard New BoardState object, to which GameBoard has a const
	pointer, is used to share board state between the two.  Use it to
	maintain consistency between the board states known by the UI, the
	Game object, AIs, etc. without duplication.  Check when selecting a
	piece to move that it is actually one of the current player's pieces.
	Also, fix memory corruption on game start - std::auto_ptr::reset
	actually deletes the currently owned object for us, so don't delete it
	manually first.

2008-06-11  Philip Allison <sane@not.co.uk>

	* src/game.cxx, src/game.hxx, src/gameboard.cxx, src/gameboard.hxx:
	Unfinished: highlight possible moves when selecting a square Needs to
	check whose turn it is an verify that they're selecting their own
	colour, and also only highlight valid moves (have a move-validity
	signal emitted by GameBoard, checked by Game?)

2008-06-10  Philip Allison <sane@not.co.uk>

	* src/gameboard.cxx, src/gameboard.hxx: Speed up board rendering by
	only drawing occupied squares Mark the drawing area for the board as
	"app paintable" (basically a hint to the library that we've overridden
	the expose event handler).  Render the empty board to a static pixmap
	and set it as the widget's background, so we don't have to redraw it
	every time the window is exposed - just when it's resized.  Turn off
	Cairo's antialiasing - we want nicely distinguishable squares, please.

2008-06-10  Philip Allison <sane@not.co.uk>

	* src/infector.cxx: Make the "quit" entry in the menu actually quit
	the app

2008-06-10  Philip Allison <sane@not.co.uk>

	* src/game.cxx, src/game.hxx, src/gameboard.cxx, src/gameboard.hxx,
	src/infector.cxx: Flesh out Game and GameBoard a bit more Add some
	signals to the game class, and code to connect those to the GameBoard
	(commented out until signal handlers are implemented) when starting a
	new game.  Set default board state when starting a new game.  Test
	graphics for populated board squares.

2008-06-09  Philip Allison <sane@not.co.uk>

	* src/Makefile.am, src/game.cxx, src/game.hxx, src/gamewindow.hxx,
	src/infector.cxx: Dummy game logic object which just logs clicked
	squares

2008-06-09  Philip Allison <sane@not.co.uk>

	* data/infector.glade, src/gameboard.cxx, src/gameboard.hxx,
	src/gamewindow.hxx, src/infector.cxx: Maintain board's aspect ratio;
	detect mouse clicks; minor code cleanups Wrap the drawing area
	representing the game board in an aspect frame to maintain its aspect
	ratio when resizing.  Prototype code for processing board clicks: fire
	a signal with the grid reference of the clicked square.  Add a few
	comments.

2008-06-05  Philip Allison <sane@not.co.uk>

	* src/Makefile.am, src/gameboard.cxx, src/gameboard.hxx,
	src/gamewindow.hxx, src/infector.cxx: Add GameBoard class Add a class
	for drawing the current state of the game board, and some debug code
	which just draws a red & blue checkerboard pattern.

2008-06-05  Philip Allison <sane@not.co.uk>

	* src/gamewindow.hxx, src/infector.cxx: Add showing off "new game"
	dialogue

2008-06-05  Philip Allison <sane@not.co.uk>

	* data/infector.glade: Tidy up Glade file: mark dialogues modal,
	transient for main window, etc.

2008-05-31  Philip Allison <sane@not.co.uk>

	* configure.ac, src/gamewindow.hxx, src/infector.cxx: Add clicked URL
	and clicked email hooks To make the website URL and author email
	address clickable in the about dialogue, we need to install callbacks
	defining the actions to be performed.  What I have here is incredibly
	hackish and should not be used as an example, but should work for
	people with GNOME and/or xdg-utils installed.

2008-05-31  Philip Allison <sane@not.co.uk>

	* data/infector.glade: Set about dialogue as transient for main window
	This means that the window manager knows which window to keep the
	dialogue on top of, centre it on, etc.

2008-05-31  Philip Allison <sane@not.co.uk>

	* data/infector.glade: Fix about dialogue title & new game dialogue
	name

2008-05-31  Philip Allison <sane@not.co.uk>

	* src/Makefile.am, src/gamewindow.hxx, src/infector.cxx: Use
	libglademm to instantiate main window from Glade file

2008-05-31  Philip Allison <sane@not.co.uk>

	* Makefile.am: Add data subdirectory to build

2008-05-31  Philip Allison <sane@not.co.uk>

	* configure.ac: Add detection of libglademm to configure.ac

2008-05-31  Philip Allison <sane@not.co.uk>

	* data/Makefile.am, data/about.glade, data/infector.glade,
	data/newgame.glade: Merge three Glade files into one and fix some
	minor issues

2008-05-30  Philip Allison <sane@not.co.uk>

	* data/Makefile.am, data/about.glade, data/infector.glade,
	data/newgame.glade: Add some Glade files describing UI elements Going
	to switch over to using libglademm instead of building the UI
	programmatically.  Add some Glade files describing the main window,
	the about dialogue, and the "new game" dialogue.

2008-05-29  Philip Allison <sane@not.co.uk>

	* src/gamewindow.hxx, src/infector.cxx: Fix "Gtk::RefPtr" (should be
	Glib) & flesh out UI a little with a toolbar

2008-05-26  Philip Allison <sane@not.co.uk>

	* Initial test code commit

